// Drawings

// ns mixins

$_ns_hover_lighten: 5;

/****************
* Borders mixin *
****************/
// $background is used for the shade a border color
@mixin ns_borders($style: 'outset', $background: $bg_color) {
  // Buttons
  @if ($style == 'outset') {
    border-left: 1px solid lighten($background,20);
    border-top: 1px solid lighten($background,20);
    border-bottom: 1px solid darken($background,40);
    border-right: 1px solid darken($background,40);
    box-shadow: inset -1px -1px 0px 0px  darken($background,30);
  }
  // Active buttons
  @if ($style == 'active') {
    border-left: 1px solid $background;
    border-top: 1px solid $background;
    border-bottom: 1px solid  darken($bg_color,40);
    border-right: 1px solid darken($bg_color,40);
    box-shadow: inset -1px -1px 0px 0px darken($bg_color,30);
  }
  // Frames
  @if ($style == 'inset') {
    box-shadow: (inset 2px 2px 0px 0px darken($background,40)),
                (inset -2px -2px 0px 0px darken($background,20)),
                (inset -1px -1px 0px 0px lighten($background,20));
  }
  // Focused inset, used for entries
  @if ($style == 'focus') {
    box-shadow: (inset 2px 2px 0px 0px darken($background,40)),
                (inset -2px -2px 0px 0px darken($background,20)),
                (inset -1px -1px 0px 0px lighten($background,20)),
                (inset  0px -2px 0px 0px darken($focus_color,20)),;
  }
}

@mixin ns_gradient_background($color: $bg_color, $dir: right) {
  background-image: linear-gradient(to $dir, darken($color, 10), $color );
}

/*
* Menu Check mixin
*/

// Checkboxes in menus are a bit flatter

@mixin menu_check {
  &,
  &:hover,
  &:checked,
  &:checked:disabled,
  &:disabled,
  &:indeterminate,
  &:disabled:indeterminate {
    background-color: transparent;
    box-shadow: none;
    border: 1px solid transparent;
    }
}

/*
* Menu radio mixin
*/

// Radios in menus are a bit flatter

@mixin menu_radio {
  &,
  &:hover,
  &:checked,
  &:checked:disabled,
  &:disabled,
  &:indeterminate,
  &:disabled:indeterminate {
    box-shadow: none;
    border: 1px solid $borders_color;
    min-height: 10px;
    min-width: 10px;
  }
}

/**************
* Entry mixin *
**************/

@mixin entry($type, $background:$bg_color, $foreground:$text_color) {
  //
  // Entries drawing function
  //
  // $t: entry type
  // $fc: focus color
  // $edge: set to none to not draw the bottom edge or specify a color to not
  //        use the default one
  //
  // possible $t values:
  // normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop;
  //
  
    //$_blank_edge: if($edge == none, none, 0 1px transparentize($edge, 1));
    //$_entry_edge: if($edge == none, none, _widget_edge($edge));
  
    @if $type==normal {
      @include ns_borders(inset);
      background-color: $base_color;
      color: $text_color;
    }
    @if $type==focus {
      @include ns_borders(focus);
    }
    @if $type==insensitive {
      @include ns_borders(inset);
      background-color: $bg_color;
      color: $insensitive_text_color;
    }
    @if $type==backdrop {
      @include ns_borders(inset, $backdrop_borders_color);
      background-color: $backdrop_base_color;
      color: $backdrop_text_color;
    }
    @if $type==backdrop-insensitive {
      @include ns_borders(inset, $backdrop_borders_color);
      background-color: $backdrop_bg_color;
      color: $insensitive_text_color;
    }
  }

/***********

Button mixin

***********/

@mixin ns_colors($background, $foreground) {
  background-color: $background;
  &,
  label,
  > check {
    color: $foreground;
  }
}

@mixin button($type, $background:$bg_color, $foreground:$text_color) {
  // Normal button
  @if $type==normal {
    @include ns_borders(outset, $background);
    @include ns_colors($background, $foreground);
  }
  @if $type==menu-normal {
    @include button(normal);
    @include ns_gradient_background;
    > label {
      color: $foreground;
    }
  }
  // Hovered button
  @else if $type==hover {
    @include ns_borders(outset, lighten($background, $_ns_hover_lighten));
    @include ns_colors(lighten($background, $_ns_hover_lighten), $foreground);
  }
  // Pushed button, ignoring all given colors
  @else if $type==active {
    @include ns_borders(active, $ns_selected_bg_color);
    @include ns_colors($ns_selected_bg_color, $ns_selected_fg_color);
  }
  // Hovered menu-button; it is actualy active...
  @else if $type==menu-hover {
    @include button(active);
    background-image: none;
    // Reset the label for nested menus
    label {
      color: $foreground;
    }
    > label {
      color: $ns_selected_fg_color;
    }
  }
  // Disabled button, ignoring foreground color
  @else if $type==insensitive {
    @include ns_borders(outset, $background);
    @include ns_colors($background, $insensitive_text_color);
  }
  // Disabled but pushed buttons, ignoring all given colors
  @else if $type==insensitive-active {
    @include ns_borders(active, $ns_selected_bg_color);
    @include ns_colors($ns_selected_bg_color, $ns_selected_insensitive_fg_color);
  }
  // Flat button. Has a transparent border to keep them the same size and box-shadow is reset
  @else if $type==undecorated-normal {
    border: 1px solid transparent;
    @include ns_colors(transparent, $foreground);
    box-shadow: none;
  }
  // Flat hover button, has a border
  @else if $type==undecorated-hover {
    border: 1px solid $borders_color;
    @include ns_colors(lighten($background, $_ns_hover_lighten), $foreground);
    box-shadow: none;
  }
  // Flat pushed button, has a border and ignores colors
  @else if $type==undecorated-active {
    border: 1px solid $borders_color;
    @include ns_colors($ns_selected_bg_color, $ns_selected_fg_color);
    box-shadow: none;
  }
  /*************************************************************************
  * Backdrops                                                              *
  *                                                                        *
  * Colors calculated based on the $_ns_backdrop_dim value in _colors.scss *
  *************************************************************************/
  // Normal button
  @else if $type==backdrop-normal {
    @include ns_borders(outset, darken($background, $_ns_backdrop_dim));
    @include ns_colors(darken($background, $_ns_backdrop_dim), darken($text_color, $_ns_backdrop_dim));
  }
  // Pushed button
  @else if $type==backdrop-active {
    @include ns_borders(active, darken($ns_selected_bg_color, $_ns_backdrop_dim));
    @include ns_colors(darken($ns_selected_bg_color, $_ns_backdrop_dim), darken($ns_selected_fg_color, $_ns_backdrop_dim));
  }
  // Disabled button
  @else if $type==backdrop-insensitive {
    @include ns_borders(outset, darken($backdrop_bg_color, $_ns_backdrop_dim));
    @include ns_colors(darken($background, $_ns_backdrop_dim), darken($insensitive_text_color, $_ns_backdrop_dim));
  }
  // Disabled but active button
  @else if $type==backdrop-insensitive-active {
    @include ns_borders(active, darken($ns_selected_bg_color, $_ns_backdrop_dim));
    @include ns_colors(darken($ns_selected_bg_color, $_ns_backdrop_dim), darken($insensitive_text_color, $_ns_backdrop_dim));
  }
}
  
/***************************
* Radio buttons *
***************************/

@mixin radio($type) {
  // Check/Radio drawing function
  //
  // $t:        check/radio type,
  // $c:        base button color for colored* types
  // $tc:       optional text color for colored* types
  // $checked:  bool to chose between checked/unchecked
  //
  // possible $t values:
  // normal, hover, active, insensitive, backdrop, backdrop-insensitive
  
  box-shadow: (inset 0px 0px 0px 2px $bg_color),(inset 0px 0px 0px 1px lighten($bg_color,40)), (inset 1px 1px 0px 1px darken($bg_color,80));
  

  @if $type==normal  {
    background-color: $bg_color;
  }

  @if $type==hover {
    //@include button(hover, lighten($background, $_ns_hover_lighten), $foreground);
    background-color: lighten($bg_color, 10);
  }

  @if $type==active {
    //@include button(normal, $background, $foreground);
    background-color: $ns_selected_bg_color;
  }

  @if $type==indeterminate {
    //@include button(normal, $background, $foreground);
    background-color: mix($bg_color, $ns_selected_bg_color, 50%);
  }

  @if $type==insensitive {
    background-color: $bg_color;
  }
  // Backdrops
  @if $type==backdrop-normal {
    background-color: $backdrop_bg_color;
  }
  @if $type==backdrop-active {
    background-color: $backdrop_ns_selected_bg_color;
  }
  @if $type==backdrop-indeterminate {
    background-color: mix($backdrop_bg_color, $backdrop_ns_selected_bg_color, 50%);
  }
  @if $type==backdrop-active {
    background-color: $backdrop_ns_selected_bg_color;
  }
}

 /***************************
 * Overshoot *
 ***************************/

@mixin overshoot($p, $t:normal, $c:$text_color) {
  //
  // overshoot
  //
  // $p: position
  // $t: type
  // $c: base color
  //
  // possible $p values:
  // top, bottom, right, left
  //
  // possible $t values:
  // normal, backdrop
  //
  
    $_small_gradient_length: 5%;
    $_big_gradient_length: 100%;
  
    $_position: center top;
    $_small_gradient_size: 100% $_small_gradient_length;
    $_big_gradient_size: 100% $_big_gradient_length;
  
    @if $p==bottom {
      $_position: center bottom;
      $_linear_gradient_direction: to top;
    }
  
    @else if $p==right {
      $_position: right center;
      $_small_gradient_size: $_small_gradient_length 100%;
      $_big_gradient_size: $_big_gradient_length 100%;
    }
  
    @else if $p==left {
      $_position: left center;
      $_small_gradient_size: $_small_gradient_length 100%;
      $_big_gradient_size: $_big_gradient_length 100%;
    }
  
    $_small_gradient_color: $c;
    $_big_gradient_color: $c;
  
    @if $c==$text_color {
      $_small_gradient_color: darken($borders_color, 10%);
      $_big_gradient_color: $text_color;
  
      @if $t==backdrop { $_small_gradient_color: $backdrop_borders_color; }
    }
  
    $_small_gradient: -gtk-gradient(radial,
                                    $_position, 0,
                                    $_position, 0.5,
                                    to($_small_gradient_color),
                                    to(transparentize($_small_gradient_color, 1)));
  
    $_big_gradient: -gtk-gradient(radial,
                                  $_position, 0,
                                  $_position, 0.6,
                                  from(transparentize($_big_gradient_color, 0.93)),
                                  to(transparentize($_big_gradient_color, 1)));
  
    @if $t==normal {
      background-image: $_small_gradient, $_big_gradient;
      background-size: $_small_gradient_size, $_big_gradient_size;
    }
  
    @else if $t==backdrop {
      background-image: $_small_gradient;
      background-size: $_small_gradient_size;
    }
  
    background-repeat: no-repeat;
    background-position: $_position;
  
    background-color: transparent; // reset some properties to be sure to not inherit them somehow
    border: none;                  //
    box-shadow: none;              //
  }
